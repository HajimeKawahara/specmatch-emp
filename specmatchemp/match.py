"""
@filename match.py

Defines the Match class
"""
import pandas as pd
import numpy as np
import lmfit

# lmfit python package

class Match:
    def __init__(self, target, reference):
        """
        Constructor for the Match class

        target, reference spectra should be given as Pandas dataframes.
        """
        target.columns = ['s_targ', 'serr_targ', 'w']
        reference.columns = ['s_ref', 'serr_ref', 'w']
        self.spectra = pd.merge(target, reference, how='inner', on='w')
        self.best_params = lmfit.Parameters()
        self.best_chisq = np.NaN

    def create_model(self, params):
        """
        Creates a tweaked model based on the parameters passed,
        based on the reference spectrum.
        Stores the tweaked model in spectra.s_mod and serr_mod.
        """
        amp = params['amp'].value
        self.spectra['s_mod'] = self.spectra['s_ref']*amp
        self.spectra['serr_mod'] = self.spectra['serr_ref']*amp

    def residual(self, params):
        """
        Objective function evaluating goodness of fit given the passed parameters

        Args:
            params
        Returns:
            Reduced chi-squared value between the target spectra and the 
            model spectrum generated by the parameters
        """
        self.create_model(params)
        # Calculate residuals
        diffsq = self.spectra['s_targ']-self.spectra['s_mod']
        variance = np.sqrt((self.spectra['serr_targ']**2+self.spectra['serr_mod']**2))

        return diffsq/variance

    def best_fit(self):
        """
        Calculates the best fit model by minimizing over the parameters
        """
        # Add parameters
        params = lmfit.Parameters()
        params.add('amp', value=1.0, min=0.1, max=1.5)

        # Minimize chi-squared
        out = lmfit.minimize(self.residual, params)

        # Save best fit parameters
        self.best_params = out.params
        self.best_chisq = out.redchi
        self.create_model(self.best_params)


